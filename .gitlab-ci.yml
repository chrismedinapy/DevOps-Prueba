stages:
  - setup
  - bump_version
  - test
  - docker_build
  - docker_scan
  - prep_deployment_files
  - update_branch

print-info:
  stage: setup
  tags:
    - python
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  script:
    - 'echo "Job start: $CI_JOB_STARTED_AT"'
    - 'echo "Branch: $CI_COMMIT_BRANCH"'
    - 'echo "Commit Author: $CI_COMMIT_AUTHOR"'

bump_version:
  stage: bump_version
  image: alpine:3
  tags:
    - python
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  script:
    - version=$(cat version.txt)
    - major=`echo $version | cut -d. -f1`
    - minor=`echo $version | cut -d. -f2`
    - patch_aux=`echo $version | cut -d. -f3`
    - patch=`echo $patch_aux | cut -d'-' -f1`
    - echo "$major.$minor.$patch"
    - echo "......................................................................................................................"
    - echo "$CI_COMMIT_MESSAGE"
    - echo "$CI_COMMIT_MESSAGE" > commit
    - cat commit
    - if grep -q VERSION_MINOR commit; then
    - echo minor
    - minor=$(($minor + 1))
    - patch=0
    - echo "$major.$minor.$patch"
    - elif grep -q VERSION_MAJOR commit; then
    - echo major
    - major=$(($major + 1))
    - patch=0
    - echo "$major.$minor.$patch"
    - else
    - echo patch
    - patch=$(($patch + 1))
    - echo "$major.$minor.$patch"
    - fi
    - sed -i "s!$version!$major.$minor.$patch!g" version.txt
    - mkdir -p tmp
    - cp version.txt ./tmp/version.txt
  artifacts:
    paths:
      - ./tmp/version.txt
    expire_in: 1 hour
  allow_failure: false

test:
  stage: test
  tags:
    - test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^feature/
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true

unit-test:
  stage: test
  tags:
    - test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /^feature/
  image: python:3.11.3-slim-buster
  script:
    - echo "$ENV" > .env
    - pip install -r requirements.txt
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test

build_docker:
  image: docker:dind
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  stage: docker_build
  tags:
    - python
  dependencies:
    - bump_version
  script:
    - version=$(cat ./tmp/version.txt)
    - echo "$version"
    - echo "$ENV" > .env
    - docker build -t "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:$version" -t "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:latest" .
    - docker push "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:$version"
    - docker push "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:latest"

scan_docker:
  image: docker:dind
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  stage: docker_scan
  tags:
    - python
  dependencies:
    - bump_version
  script:
    - version=$(cat ./tmp/version.txt)
    - apk add --update curl
    - curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- 
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PAT"
    - docker scout quickview "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:$version"
    - docker scout cves "$PRIVATE_CI_REGISTRY/$CI_REGISTRY_USER/$CI_REGISTRY_IMAGE:$version"
  allow_failure: false

deployment_files:
  stage: prep_deployment_files
  image: node:16.15.1-slim
  tags:
    - python
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  dependencies:
    - bump_version
  script:
    - mkdir -p tmp
    - tag=$(cat ./tmp/version.txt)
    - echo "Deploying application..."
    - echo "Prep Deployments files."
    - echo "$DEPLOY" > tmp/1_deployment.yml
    - echo "$SERVICE" > tmp/2_service.yml
    - echo "$INGRESS" > tmp/3_ingress.yml
    - echo "$HPA" > tmp/4_hpa.yml
    - sed -i "s!VERSION!$tag!g" tmp/1_deployment.yml
    - echo "Application successfully deployed."
  artifacts:
    paths:
      - ./tmp/1_deployment.yml
      - ./tmp/2_service.yml
      - ./tmp/3_ingress.yml
      - ./tmp/4_hpa.yml
    expire_in: 1 hour
  allow_failure: false

update_master_branch:
  stage: update_branch
  image: mrnonz/alpine-git-curl
  tags:
    - python
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  dependencies:
    - bump_version
    - deployment_files
  script:
    - git remote set-url origin http://${CI_USER}:${CI_PUSH_TOKEN}@git.bepsa.com.py/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    - git config --local user.email '${GITLAB_USER_EMAIL}'
    - git config --local user.name '${GITLAB_USER_ID}'
    - git config --local user.password '${CI_PUSH_TOKEN}'
    - git checkout -B version/"${CI_COMMIT_SHA}"
    - version=$(cat tmp/version.txt)
    - cp tmp/version.txt ./version.txt
    - git add ./version.txt
    - git commit -m "Version $version"
    - git push -u origin version/"${CI_COMMIT_SHA}":master -o ci.skip
    - git checkout master
    - git branch -d version/"${CI_COMMIT_SHA}"
    - echo pushing changes
  when: on_success
  allow_failure: false

update_deployment_branch:
  stage: update_branch
  image: mrnonz/alpine-git-curl
  tags:
    - python
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"'
  dependencies:
    - deployment_files
    - bump_version
  script:
    - version=$(cat ./tmp/version.txt)
    - git clone http://${CI_USER}:${TOKEN_DEPLOYMENT_REPO}@${GIT_SERVER}/deployments/${DEPLOYMENT_REPO}.git
    - cd ./${DEPLOYMENT_REPO}
    - git config --local user.email '${GITLAB_USER_EMAIL}'
    - git config --local user.name '${GITLAB_USER_ID}'
    - git config --local user.password '${TOKEN_DEPLOYMENT_REPO}'
    - git checkout -B version/"${CI_COMMIT_SHA}"
    - git pull origin master --rebase
    - mkdir -p ./${PROJECT_NAME}/${SERVICE_TYPE}
    - cp ../tmp/1_deployment.yml ./${PROJECT_NAME}/${SERVICE_TYPE}/1_deployment.yml
    - cp ../tmp/2_service.yml ./${PROJECT_NAME}/${SERVICE_TYPE}/2_service.yml
    - cp ../tmp/3_ingress.yml ./${PROJECT_NAME}/${SERVICE_TYPE}/3_ingress.yml
    - cp ../tmp/4_hpa.yml ./${PROJECT_NAME}/${SERVICE_TYPE}/4_hpa.yml
    - git add ./${PROJECT_NAME}/${SERVICE_TYPE}/1_deployment.yml
    - git add ./${PROJECT_NAME}/${SERVICE_TYPE}/2_service.yml
    - git add ./${PROJECT_NAME}/${SERVICE_TYPE}/3_ingress.yml
    - git add ./${PROJECT_NAME}/${SERVICE_TYPE}/4_hpa.yml
    - git commit -m "Version $version"
    - git push -u origin version/"${CI_COMMIT_SHA}":master -o ci.skip
    - git checkout master
    - git branch -d version/"${CI_COMMIT_SHA}"
    - echo pushing changes
  when: on_success
  allow_failure: false
